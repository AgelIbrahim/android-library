buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.android.tools.build:gradle:1.2.2'
    }
}

apply plugin: 'com.android.library'


repositories {
    jcenter()
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 22

        buildConfigField "String", "URBAN_AIRSHIP_VERSION", "\"${airshipVersion}\""

        consumerProguardFiles 'consumer-proguard.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

configurations {
    doclava
}

dependencies {
    compile 'com.android.support:support-v4:22.1.0'
    compile 'com.android.support:cardview-v7:22.1.0'
    compile 'com.google.android.gms:play-services-location:7.0.0'
    compile 'com.google.android.gms:play-services-gcm:7.0.0'

    provided files('libs/amazon-device-messaging-1.0.1.jar')

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile('org.robolectric:robolectric:3.0-rc2') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile 'org.robolectric:shadows-support-v4:3.0-rc2'

    doclava("com.google.doclava:doclava:1.0.6")
}

//generates NativeBridge.java
task templatizeNativeBridge(type: Exec) {
    commandLine 'src/main/js/templatize'
}

def getDexMethodCount() {
    try {
        def dx = "${android.getSdkDirectory()}/build-tools/${android.getBuildToolsRevision()}/dx"
        def jar = "${project.buildDir}/intermediates/bundles/release/classes.jar"
        def output = new ByteArrayOutputStream()
        exec {
            commandLine "../tools/dex-method-count.sh", dx, jar
            standardOutput = output
        }
        return output.toString().trim()
    } catch (e) {
        println(e)
        return ""
    }
}

task runDexMethodCount << {
    def count = getDexMethodCount()

    File dex = file("${project.buildDir}/dex-counts/release")
    dex.getParentFile().mkdirs()
    dex.text = "Dex Method Count: ${count}"
    println("Dex Method Count: ${count}")
}

project.afterEvaluate {
    prepareDebugDependencies.dependsOn(templatizeNativeBridge)
    prepareReleaseDependencies.dependsOn(templatizeNativeBridge)
    runDexMethodCount.dependsOn(assembleRelease)
}

task javaDoc(type: Javadoc, dependsOn: 'compileReleaseJava') {
    // Title needs to be null for doclava
    title = null

    source = android.sourceSets.main.java.srcDirs

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    // TODO:: Need to figure out how to resolve these dependencies through gradle
    classpath += files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    classpath += files("${android.sdkDirectory}/extras/android/support/v4/android-support-v4.jar")
    classpath += files("${android.sdkDirectory}/extras/android/support/v7/cardview/libs/android-support-v7-cardview.jar")
    classpath += files("${android.sdkDirectory}/extras/google/google_play_services/libproject/google-play-services_lib/libs/google-play-services.jar")
    classpath += files("libs/amazon-device-messaging-1.0.1.jar")

    exclude '**/BuildConfig.java'
    exclude '**/R.java'

    options {
        docletpath = configurations.doclava.files.asType(List)
        doclet "com.google.doclava.Doclava"
        bootClasspath new File(System.getenv('JAVA_HOME') + "/jre/lib/rt.jar")
        addStringOption "hdf project.name", "Urban Airship Android Library"
        addStringOption "hdf project.version", airshipVersion
        addStringOption "apiversion", "v2"
        addStringOption "federate android", "http://developer.android.com/reference"
        addStringOption "federationxml android", "docs/android-22.xml"
        addStringOption "templatedir", "docs/template"
    }
}
