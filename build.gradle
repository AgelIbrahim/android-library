import java.text.SimpleDateFormat
import org.apache.http.entity.FileEntity
import groovyx.net.http.RESTClient

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.+'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

def gitRevision(dir) {
    try {
        def output = new ByteArrayOutputStream()
        exec {
            workingDir dir
            commandLine 'git', 'log', '-n', "1", "--format='%h'"
            standardOutput = output
        }
        return output.toString().trim()
    } catch (e) {
        return "unknown"
    }
}

def timeStamp() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

task cleanPackageUrbanAirshipRelease(type: Delete) {
    delete "$buildDir/ua-staging", "$buildDir/ua-package"
}

task packageUrbanAirshipRelease << {

    def urbanAirshipSdkProject = project.findProject('urbanairship-sdk')
    def urbanAirshipMinSdkVersion = urbanAirshipSdkProject.android.defaultConfig.targetSdkVersion.mApiLevel
    def samplesProject = project.findProject(':samples')

    // Unpacked library
    copy {
        println "Staging library."
        from zipTree(file("${urbanAirshipSdkProject.buildDir}/outputs/aar/urbanairship-sdk-release.aar"))
        into file("$buildDir/ua-staging/urbanairship-lib")
        rename "classes.jar", "libs/urbanairship-lib-${airshipVersion}.jar"
        include "proguard.txt", "res/**", "classes.jar"
    }

    // Eclipse project.properties file
    File propertiesFile = file("$buildDir/ua-staging/urbanairship-lib/project.properties")
    propertiesFile.text = "target=android-${urbanAirshipMinSdkVersion}\n"
    propertiesFile.text += "android.library=true"

    // Eclipse AndroidManifest.xml
    File manifestFile = file("$buildDir/ua-staging/urbanairship-lib/AndroidManifest.xml")
    manifestFile.text = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
    manifestFile.text += "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.urbanairship\">\n"
    manifestFile.text += "  <uses-sdk android:minSdkVersion=\"${urbanAirshipMinSdkVersion}\" />\n"
    manifestFile.text += "  <application />\n"
    manifestFile.text += "</manifest>\n"

    // Eclipse project should include an empty src directory for some of the build systems
    new File("$buildDir/ua-staging/urbanairship-lib/src").mkdirs()


    // Library as AAR
    copy {
        println "Staging aar."
        from "${urbanAirshipSdkProject.buildDir}/outputs/aar/urbanairship-sdk-release.aar"
        into "$buildDir/ua-staging"
        rename "urbanairship-sdk-release.aar", "urbanairship-lib-${airshipVersion}.aar"
    }

    // Samples
    samplesProject.subprojects.findAll { sample ->
        println "Staging ${sample.getName()}"

        copy {
            from sample.getProjectDir()
            into file("$buildDir/ua-staging/samples/${sample.getName()}")
            exclude "build", "**/*.iml", "**/api_key.txt", "**/.DS_STORE", "**/airshipconfig.properties",
                    "**/airshipconfig.properties.sample", "lint.xml", "**.sample"
        }

        copy {
            from new File(sample.getProjectDir(), "assets/airshipconfig.properties.sample")
            into file("$buildDir/ua-staging/samples/${sample.getName()}/assets")
            rename "airshipconfig.properties.sample", "airshipconfig.properties"
        }
    }

    // Samples gradle files and README
    copy {
        println "Staging Gradle files and README for samples."
        from samplesProject.getProjectDir()
        into file("$buildDir/ua-staging/samples")
        include "gradle/**", "gradlew", "gradlew.bat", "settings.gradle", "build.gradle", "README.md"
    }

    // README, LICENSE, and CHANGELOG
    copy {
        println "Staging README, LICENSE, and CHANGELOG."
        from project.getProjectDir()
        into file("$buildDir/ua-staging")
        include "README.md", "LICENSE", "CHANGELOG"
    }

    // Docs
    copy {
        println "Staging docs."
        from "${urbanAirshipSdkProject.buildDir}/docs/javadoc"
        into "$buildDir/ua-staging/javadocs"
    }

    // Build info file
    File buildInfo = file("$buildDir/ua-staging/BUILD_INFO")
    buildInfo.text = "Urban Airship SDK v${airshipVersion} \n\n"
    buildInfo.text += "Build time: ${timeStamp()} \n"
    buildInfo.text += "SDK commit: ${gitRevision(".")} \n"
    buildInfo.text += "Samples commit: ${gitRevision("samples")} \n"
    buildInfo.text += "Java: ${JavaVersion.current()}"

    // Dex count
    File dexCount = file("${urbanAirshipSdkProject.buildDir}/dex-counts/release")
    if (dexCount.exists()) {
        buildInfo.text += "\n"
        buildInfo.text += dexCount.text
    }

    // Add any additional build info
    File additionalBuildInfo = file("${project.getProjectDir()}/BUILD_INFO")
    if (additionalBuildInfo.exists()) {
        buildInfo.text += "\n"
        buildInfo.text += additionalBuildInfo.text
    }

    // Pack it up.
    task("zipRelease", type: Zip) {
        println "Creating package zip."
        destinationDir file("$buildDir/ua-package")
        from file("$buildDir/ua-staging")
        include "**/*"
        archiveName "ua-android-lib-${airshipVersion}.zip"
    }.execute()
}

def uploadBuildInfo(String repo, boolean publish) {
    def url =  "https://api.bintray.com/content/urbanairship/${repo}/urbanairship-sdk/${airshipVersion}/distributions/BUILD_INFO-${airshipVersion}?publish=${publish ? 1 : 0}"
    def file = new File("$buildDir/ua-staging/BUILD_INFO")
    def rest = new RESTClient(url)
    rest.auth.basic(bintrayUser, bintrayApiKey)
    rest.put(body: file.text, requestContentType: 'text/plain')
}

def uploadRelease(String repo, boolean publish) {
    def url =  "https://api.bintray.com/content/urbanairship/${repo}/urbanairship-sdk/${airshipVersion}/distributions/ua-android-lib-${airshipVersion}.zip?publish=${publish ? 1 : 0}"
    def file = new File("$buildDir/ua-package/ua-android-lib-${airshipVersion}.zip")

    def rest = new RESTClient(url)

    rest.encoder.'application/zip' = { Object data ->
        def entity = new FileEntity((File)data, "application/zip");
        entity.setContentType("application/zip");
        return entity
    }

    rest.auth.basic(bintrayUser, bintrayApiKey)
    rest.put(body: file, requestContentType: 'application/zip')
}

task bintrayUploadInternal << {
    uploadRelease("android-internal", true)
    uploadBuildInfo("android-internal", true)
}

task bintrayUploadRelease << {
    uploadRelease("android", false)
    uploadBuildInfo("android", false)
}

bintrayUploadInternal.dependsOn("packageUrbanAirshipRelease", 'urbanairship-sdk:bintrayUploadInternal')
bintrayUploadInternal.mustRunAfter('urbanairship-sdk:bintrayUpload')

bintrayUploadRelease.dependsOn("packageUrbanAirshipRelease", 'urbanairship-sdk:bintrayUploadRelease')
bintrayUploadRelease.mustRunAfter('urbanairship-sdk:bintrayUpload')

packageUrbanAirshipRelease.dependsOn('cleanPackageUrbanAirshipRelease', 'urbanairship-sdk:assembleRelease', 'urbanairship-sdk:javadoc',
        'urbanairship-sdk:runDexMethodCount')

task continuousIntegration
continuousIntegration.dependsOn(':samples:PushSample:build', ':samples:RichPushSample:build', 'urbanairship-sdk:assembleRelease',
        'urbanairship-sdk:testReleaseUnitTest', 'urbanairship-sdk:javadoc', 'packageUrbanAirshipRelease')